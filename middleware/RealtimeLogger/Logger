var config = require("/config/Server").getConfig()
var LOG_CHANNEL = config.server.logChannel

var log = require("log");
var messaging = require("pubsub")
//log.setLevel(config.server.logLevel); //levels are ERROR | WARN | INFO | DEBUG | OFF  

log.debug("LOG_CHANNEL: " + LOG_CHANNEL)

function Logger(scope) {
    
  this.levelIndex = 4
  this.level = "DEBUG" 
  this.script = scope.currentScript?scope.currentScript:scope.request.URI
  var scriptName = this.script
  
  this.realtimeEnabled = (config.server.realTimeLogging=="on")
  realtimeEnabled = this.realtimeEnabled
  
  this.setLogLevel = function (level) {
    var levels = {DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3}
    this.level = level
    this.levelIndex = levels[level]
  }
  
  var msg = function(args) {
    var s="" 
	
    for (var i=0; i<args.length; i++) {
      var obj = args[i]
      if (obj !== null && typeof obj === 'object') s+=JSON.stringify(obj,null,4)+"\t"; else s+=obj+"\t"
    }
    return s
  }
  
  function syntaxHighlight(json) {
    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, 			 function(match) {
      var cls = 'number';
      if (/^"/.test(match)) {
        if (/:$/.test(match)) {
          cls = 'key';
        } else {
          cls = 'string';
        }
      } else if (/true|false/.test(match)) {
        cls = 'boolean';
      } else if (/null/.test(match)) {
        cls = 'null';
      }
      return '<span class="' + cls + '">' + match + '</span>';
    });
  }      

  var msgHTML = function(args) {
    var s="" 
	
    for (var i=0; i<args.length; i++) {
      var obj = args[i]
      if (obj !== null && typeof obj === 'object') s+=syntaxHighlight(JSON.stringify(obj,undefined,4))+"\t"; else s+=obj+"\t"
    }
    return s
  }
  
  var logLevels = ['debug', 'info', 'warn', 'error']

  for (var i=0; i<logLevels.length; i++) {
    this[logLevels[i]] = (function(level) {
      return function() {
        if (this.levelIndex>level) return

        var logTxt = msg(arguments)
        console[logLevels[level]](logTxt)
        
//        var msgTxt = JSON.stringify({type: logLevels[level], timestamp: new Date(), level: level, txt: logTxt}) //
//        var msgTxtHTML = JSON.stringify({type: logLevels[level], script: this.script, timestamp: new Date(), level: level, txt: msgHTML(logTxt)})
        var msgTxt = JSON.stringify({type: logLevels[level], script: scriptName, timestamp: new Date(), level: level, txt: logTxt})
        if (realtimeEnabled) messaging.publish(LOG_CHANNEL, msgTxt)

        log.setLevel("DEBUG") //levels are ERROR | WARN | INFO | DEBUG | OFF
        log[logLevels[level]](logTxt);
      }
    })(i)
  }
  
  this.startProfiling = function() {
    this.startTime = (new Date()).getTime()
  }

  this.getLapse = function() {
    var lapse = (new Date()).getTime()-this.startTime
    this.debug(lapse + "ms passed since startProfiling was invoked")
  }

  this.clear = () => {
      var msgTxt = JSON.stringify({type: "control", timestamp: new Date(), level: 10, txt: "[CLEAR]"})
      if (realtimeEnabled) messaging.publish(LOG_CHANNEL, msgTxt)
  }
  
  this.application = (componentName, details) => {
      var msg = {type: "application", script: scriptName, level: "APPLICATION", componentName: componentName, timestamp: new Date()}
      msg.details = details
      //for (var k in attrs) msg[k] = attrs[k]
      
      var msgTxt = JSON.stringify(msg)
      if (realtimeEnabled) messaging.publish(LOG_CHANNEL, msgTxt)      
  }
  
  scope.logger = {
    setLevel: this.setLogLevel,

    debug: this.debug,
    info: this.info,
    warn: this.warn,
    error: this.error,
    log: this.debug,

    startProfiling: this.startProfiling,
    getLapse: this.getLapse,	
    dir: this.dir,
	clear: this.clear,
    
    application: this.application,
      
    print: function(s1, s2) {
       if (!s2) {
           this.debug(s1)
	       console.log(s1) 
       } else {
           this.debug("\n"+s1+"\n"+s2)
	       console.log("\n"+s1+"\n"+s2)
       }        
    },
    printo: function(l, o) {
        if (!o) {
            o = l
            this.debug(o)
            console.log(JSON.stringify(o, null, 3))             
        } else {
            this.debug("\n"+l+"\n"+JSON.stringify(o, null, 4))

            console.log(l)             
            console.log(JSON.stringify(o, null, 3))             
        }
  	},
    print1: function(s) {
        this.debug(s)
        console.log(s) 
    },
    printo1: function(o) {
        this.debug(o)
//      	log.debug(JSON.stringify(o));
      	console.log(JSON.stringify(o, null, 3)) 
  	}
  }
  
  return scope.logger
}


function test() {
    rtlog = Logger(this)

    var methods = [rtlog.log, rtlog.debug, rtlog.info, rtlog.warn, rtlog.error]
    
    
    
//    rtlog.application("someComponent", params)

    for (var i=0; i<5; i++) {
        methods[i%5]("the quick brown fox jumped over the lazy: " + i)
    }
    
    rtlog.application("someComponent", {params: {a:1, b:2, c:"asdasd"}})
}

//test()